#include <iostream>
#include <bits/stdc++.h>
using namespace std;


bool isCyclic(int x, vector<int> &vis, vector<vector<pair<int,int>>> &g){
    vis[x]=0;
    for(int i=0;i<g[x].size();i++){
        int nn=g[x][i].second;
        if(vis[nn]==-1){
            if(isCyclic(nn,vis,g)){
                return true;
            }
        }
        else if(vis[nn]==0){
            return true;
        }
        
    }
    vis[x]=1;
    return false;
}

void dfs(vector<vector<pair<int,int>>> &g, vector<int> &dp, int node){
    if(dp[node]!=-1) return;
    dp[node]=0;
    for(int i=0;i<g[node].size();i++){
        int nn = g[node][i].second;
        int dis = g[node][i].first;
        dfs(g,dp,nn);
        dp[node]=max(dp[node],dis+dp[nn]);
    }
    return;
}
    
int solve(vector<vector<pair<int,int>>> &g) {
    int n=g.size();
    vector<int>vis(n,-1);
    for(int i=0;i<n;i++) if(isCyclic(i,vis,g)) return -1;
    vector<int>dp(n,-1);
    for(int i=0;i<n;i++){
        dfs(g,dp,i);
    }
    int mx=*max_element(dp.begin(),dp.end());
    if(mx>100) return -1;
    return mx;
}  
    
int main()
{
   int n,q;
   cin>>n;
   cin>>q;
   vector<vector<pair<int,int>>> g(n);
   for(int i=0;i<q;i++){
       int p1,p2,d;
       cin>>p1>>p2>>d;
       if(d>0){
           g[p1-1].push_back(make_pair(d,p2-1));
       }
       else if(d<0){
           g[p2-1].push_back(make_pair(-d,p1-1));
       }
   }
   
    cout<<solve(g)<<endl;
    
   return 0;
}
